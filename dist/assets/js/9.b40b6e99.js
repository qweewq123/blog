(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{332:function(t,e,a){"use strict";a.r(e);var r=a(1),i=Object(r.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[t._m(0),a("p",[t._v("原型prototype是javascript中极其重要的概念之一，但也是比较容易引起混淆的地方。我们需要花费一些时间和精力好好理解原型的概念，这对于我们学习javascript是必须的。")]),t._m(1),a("p",[t._v("真正理解什么是原型是学习原型理论的关键。很多人在此产生了混淆，没有真正理解，自然后续疑惑更多。")]),a("p",[t._v("首先，我们明确原型是一个对象，其次，最重要的是，\nEvery function has a prototype property and it contains an object\n这句话就是说，每个函数都有一个属性叫做原型，这个属性指向一个对象。\n也就是说，原型是函数对象的属性，不是所有对象的属性，对象经过构造函数new出来，那么这个new出来的对象的构造函数有一个属性叫原型。明确这一点很重要。")]),a("p",[t._v("The prototype property is a property that is available to you as soon as you define the function. Its initial value is an “empty” object.\n每次你定义一个函数的时候，这个函数的原型属性也就被定义出来了，也就可以使用了，如果不对它进行显示赋值的话，那么它的初始值就是一个空的对象Object。\n所以，综上我们知道我们讨论原型的时候，都是基于函数的，有了一个函数对象，就有了原型。切记这一点，讨论原型，不能脱离了函数，它是原型真正归属的地方， 原型只是函数的一个属性 ！")]),t._m(2),a("p",[t._v("chrome控制台测试结果")]),t._m(3),a("p",[t._v("我们可以看到函数foo的原型是空对象Object，所有函数的构造函数都是Function。")]),t._m(4),a("p",[t._v("不使用原型，使用构造函数给对象添加属性和方法的是通过this，像下面这样。")]),t._m(5),a("p",[t._v("Gadget是一个构造函数，作为一个函数，它有一个属性，这个属性是原型，它指向一个对象，目前我们没有设置这个属性，所以它是一个空的对象。")]),t._m(6),a("p",[t._v("当我们有了原型之后，我们可以给构造函数的原型对象添加属性和方法来。\n像下面这样")]),t._m(7),a("p",[t._v("给原型添加了属性和方法后，原型所指的对象也会更新")]),t._m(8),t._m(9),a("p",[t._v("我们使用原型的对象和方法不会在直接在构造函数上使用，而是通过构造函数new出一个对象，那么new出来的对象就会有构造函数原型里的属性和方法。")]),t._m(10),a("p",[t._v("这里很容易造成误解，我们需要强调newtoy这个new出来的对象是没有原型的，原型只是函数对象的一个属性，newtoy是通过构造函数new出来的对象，所以他不是函数对象，也没有prototype属性，我们在chrome的控制台里自然也无法访问他的prototype属性。\n但我们可以通过构造函数访问。\n我们知道每个对象都有constructor属性，newtoy的constructor属性就指向Gadget，那么我们通过constructor可以访问到prototype。")]),t._m(11),a("p",[t._v("到这里，我们对为什么要通过constructor.protptype访问属性应该清楚了。（笔者第一次接触原型就没看懂这个），切记，原型是函数对象的属性，只有函数对象才有原型就容易理解了。")]),t._m(12),t._m(13),t._m(14),a("p",[t._v("这里涉及到javascript是如何搜索属性和方法的，javascript会先在对象的自身属性里寻找，如果找到了就输出，如果在自身属性里没有找到，那么接着到构造函数的原型属性里去找，如果找到了就输出，如果没找到，就null。\n所以，如果碰到了自身属性和原型属性里有同名属性，那么根据javascript寻找属性的过程，显然，如果我们直接访问的话，会得到自身属性里面的值。")]),t._m(15),a("p",[t._v("我们加下来做一个小实验，寻找toString方法是谁的属性，一步步寻找")]),t._m(16),a("p",[t._v("通过实验我们可以发现，原来toString方法是object的原型对象的方法。")]),t._m(17),a("p",[t._v("Object的原型里还有这样一个方法isPrototypeOf(),这个方法可以返回一个特定的对象是不是另一个对象的原型，实际这里不准确，因为我们知道只有函数对象有原型属性，普通对象通过构造函数new出来，自动继承了构造的函数原型的属性方法。但这个方法是可以直接判断，而不需要先取出constructor对象再访问prototype。看下面的例子：")]),t._m(18),t._m(19),t._m(20),t._m(21),a("p",[t._v("我们之前访问对象的原型，都要先取得构造函数然后访问prototype")]),t._m(22),a("p",[t._v("这样是不是特别别扭，所以各个浏览器一般都会给出一个proto属性，前后分别有双下划线，对象的这个属性可以直接访问到构造函数的原型。这就很方便了。所以proto与prototype是有很大区别的。区别就在此。proto是实例对象用来直接访问构造函数的属性，prototype是函数对象的原型属性。")]),t._m(23),t._m(24),t._m(25),a("p",[t._v("显然现在已经很容易弄清楚了proto和prototype的区别了。")]),t._m(26),a("p",[t._v("原型在使用的时候有一个陷阱：\n在我们完全替换掉原型对象的时候，原型会失去实时性，同时原型的构造函数属性不可靠，不是理论上应该的值。\n这个陷进说的是什么呢？好像不太明白\n举个例子我们就懂了")]),t._m(27),a("p",[t._v("我们进行测试：")]),t._m(28),a("p",[t._v("直到这里一切都是正常的\n接下来我们将原型对象整个替换掉")]),t._m(29),t._m(30),a("p",[t._v("通过测试我们发现，我们没法访问刚刚更新的原型对象，却能访问之前的原型对象，这说明没有实现实时性。")]),a("p",[t._v("我们继续测试")]),t._m(31),a("p",[t._v("我们发现这时新建的对象可以访问更新后的原型，但是构造方法又不对了，本来constructor属性应该指向dog，结果却指向了Object。这就是javascript中的原型陷阱。")]),a("p",[t._v("我们很容易解决这个问题，只要在更新原型对象后面，重新指定构造函数即可。")]),t._m(32),t._m(33),a("p",[t._v("这样所有就按正常的运行了")]),t._m(34),t._m(35),a("p",[t._v("我们大概介绍了原型中容易混淆的问题，主要有以下几方面:")]),t._m(36),a("p",[a("a",{attrs:{href:"https://liuchi.coding.me/2017/01/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3javascript%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B/",target:"_blank",rel:"noopener noreferrer"}},[t._v("转载"),a("OutboundLink")],1)])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"深入理解javascript中的原型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#深入理解javascript中的原型","aria-hidden":"true"}},[this._v("#")]),this._v(" 深入理解javascript中的原型")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"原型的概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型的概念","aria-hidden":"true"}},[this._v("#")]),this._v(" 原型的概念")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-{js} extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function foo(a,b) {\n    return a+b;\n}\nfoo.prototype\nfoo.constructor\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/1234352-96cea924e2c6dc06.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"使用原型给对象添加方法和属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用原型给对象添加方法和属性","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用原型给对象添加方法和属性")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-{js} extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function Gadget(name, color) {\n    this.name = name;\n    this.color = color;\n    this.whatAreYou = function() {\n        return 'I am ' + this.color + '  ' + this.name; \n    }\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("Adding methods and properties to the prototype property of the constructor\nfunction is another way to add functionality to the objects this constructor produces")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-{js} extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("Gadget.prototype.price = 100;\nGadget.prototype.rating = 3;\nGadget.prototype.getInfo = function() {\n    return 'Rating: ' + this.rating +', price: ' + this.price;\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/1234352-9363a11910f64fc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"使用原型对象的属性和方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用原型对象的属性和方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用原型对象的属性和方法")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/1234352-471038db652d523e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/1234352-35443c4508a02382.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"原型的实时性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型的实时性","aria-hidden":"true"}},[this._v("#")]),this._v(" 原型的实时性")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这里特别需要提出，原型是实时的，意思就是原型对象的属性和方法会实时更新。其实很好理解，javascript中对象是通过引用传递的，原型对象只有一份，不是new出一个对象就复制一份，所以我们对原型的操作和更新，会影响到所有的对象。这就是原型对象的实时性。\n"),e("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/1234352-c9ad1967b9af0b84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"自身属性与原型属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自身属性与原型属性","aria-hidden":"true"}},[this._v("#")]),this._v(" 自身属性与原型属性")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/1234352-7e542ecd0c5f5255.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/1234352-63dee589a984a269.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"isprototypeof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#isprototypeof","aria-hidden":"true"}},[this._v("#")]),this._v(" isPrototypeOf()")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-{js} extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function Human(name) {\n    this.name = name;\n}\n\nvar monkey = {\n    hair:true,\n    feeds:'banana',\n}\n\nHuman.prototype = monkey;\n\nvar chi = new Human('chi');\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/1234352-8c2f9944b429c645.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("我们知道chi这个对象是没有原型属性的，它有的是他的构造函数的原型属性monkey。但isPrototypeOf直接判断，实际上是省略了获取构造函数的过程，搞清楚这里面的区别。\nobject还有一个getPrototypeOf方法，基本用法和isPrototype一样，参考下面的代码：\n"),e("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/1234352-09c3025f68fe706c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"神秘的proto链接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#神秘的proto链接","aria-hidden":"true"}},[this._v("#")]),this._v(" 神秘的proto链接")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-{js} extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("chi.constructor.prototype;\nnewtoy.constructor.prototype;\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/1234352-557dc27db5ec5c65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-{js} extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("chi.constructor.prototype == chi.__proto__\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/1234352-6ad7fe6d04547f3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"原型的陷阱"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型的陷阱","aria-hidden":"true"}},[this._v("#")]),this._v(" 原型的陷阱")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-{js} extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function Dog() {\n    this.tail = true;\n}\n\nvar benji = new Dog();\nvar rusty = new Dog();\n\nDog.prototype.say = function () {\n    return 'Woof!';\n};\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/1234352-d9ebb0075e1d14ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-{js} extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("Dog.prototype = {\n    paws: 4,\n    hair: true\n};\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/1234352-e538ed4fd7f2ab70.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/1234352-6c0086739f3a57a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-{js} extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("Dog.prototype.constructor = Dog;\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/1234352-5be6521e397938b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("所以我们切记在替换掉原型对象之后，切记重新设置constructor.prototype")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结","aria-hidden":"true"}},[this._v("#")]),this._v(" 小结")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("所有函数都有一个属性prototype，这就是我们指的原型，他的初始值是一个空的对象")]),e("li",[this._v("你可以原型对象添加属性和方法，甚至直接用另一个对象替换他")]),e("li",[this._v("当你用构造函数new出一个对象之后，这个对象可以访问构造函数的原型对象的属性和方法")]),e("li",[this._v("对象的自身属性搜索的优先级比原型的属性要高")]),e("li",[this._v("proto属性的神秘连接及其同prototype的区别")]),e("li",[this._v("prototype使用中的陷阱")])])}],!1,null,null,null);e.default=i.exports}}]);